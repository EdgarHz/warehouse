#!/bin/sh -

error(){
    echo "$@" 1>&2
    usage_and_exit 1

}
usage(){
    echo "Usage: $PROGRAM [-l|--log|-s|--svn|-g|--git|-m|--hg|-f|--fossil|-t|--type] giturl/svnurl   [-n|--noclone] [-k|keyword]";

    echo "-n --noclone: only add it to list, not clone it to localrepo"
    echo "-k --keyword:  add some keyword to tag it."
}
usage_and_exit(){
    usage
    exit $1
}
version()
{
    echo "$PROGRAM version $Version"
}
warning() {
    echo "$@" 1>&2
    EXITCODE=`expr $EXITCODE +1 `jfd
}

if [[ $# = 0 ]]; then
    usage_and_exit
fi

PROGRAM=`basename $0`;
Version=1.0.1;
EXITCODE=0;

Type="git";
RepoURL='';
WontCloneIt=false
Keyword=''


while true; do 
# echo   "\$1 $1"
    case $1 in
    -h|--help)
        usage_and_exit
        shift
        ;;
    -g|--git)
        Type="git";
        RepoURL=$2;
        shift 2
        ;;
    -s|--svn)
        Type="svn";
        RepoURL=$2;
        shift 2
        ;;
    -m|--hg)
        Type="hg";
        RepoURL=$2;
        shift 2
        ;;
    -f|--fossil)
        Type="fossil";
        RepoURL=$2;
        shift 2
        ;;
    -t|--type)
        Type=$2;
        RepoURL=$3;
        shift 3
        ;;
    -n|--noclone)
        WontCloneIt=true
        shift;
        ;;
    -k|--keyword)
        shift;
        Keyword=$@
        shift $#
        break;
        ;;
    *)
        echo "you must has keyword with it, please"
        usage_and_exit
        ;;
    esac
done

source  zrWarehouseCommon.sh
shortName='';
case $Type in
    hg)
        shortName=${RepoURL##*/}
        ;;
    svn)
        shortName=$(svnShortName $RepoURL);
        ;;
        
    git)
        shortName=$(gitShortName $RepoURL);
        ;;
    hg)
        shortName=$(fossilShortName $RepoURL);
        ;;
     *)
        shortName=${RepoURL##*/}
        ;;
esac

echo "log as: $Type $shortName $RepoURL $Keyword"
writeInfoToList $Type $shortName $RepoURL $Keyword

if [[  $WontCloneIt = false ]]; then
    case $Type in
     git)
        echo "clone to repos: git"
        gitCloneOrUpdate $RepoRootDir $RepoURL
        ;;
     hg)
        echo "clone to repos: unsupport hg"
        ;;
     svn)
        echo "clone to repos: svn"
        svnCloneOrUpdate $RepoRootDir $RepoURL
        ;;
     fossil)
        echo "clone to repos: fossil"
        fossilCloneOrUpdate $RepoRootDir $RepoURL
        ;;
     *)
        echo "clone to repos: unknown type."
        ;;
    esac
else 
    echo "clone to repos: no"
fi








