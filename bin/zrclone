#!/bin/sh -

error(){
    echo "$@" 1>&2
    usage_and_exit 1

}
usage(){
    echo "Usage: $PROGRAM [-k|keyword] [-n|--noclone] [-l|--log|-s|--svn|-g|--git|-m|--hg|-f|--fossil] giturl/svnurl";

    echo "-k --keyword:  add some keyword to tag it."
    echo "-n --noclone: only add it to list, not clone it to localrepo"

}
usage_and_exit(){
    usage
    exit $1
}
version()
{
    echo "$PROGRAM version $Version"
}
warning() {
    echo "$@" 1>&2
    EXITCODE=`expr $EXITCODE +1 `jfd
}
PROGRAM=`basename $0`;
Version=1.0.1;
EXITCODE=0;

WontCloneIt=false;
Keyword=''
Type="git";

Options=`getopt  hnlgsmk::  $*`
#--long help,noclone,git,svn,hg,keyword::
if [[ $? != 0 ]]; then
    usage_and_exit
fi
# echo $Options
eval set -- $Options
# echo $@ "??"

while true; do
    echo "\$1" $1
    case $1 in
    -h|--help)
        usage_and_exit
        shift
        ;;
    -n|--noclone)
        WontCloneIt=true
        shift;
        ;;
    -l|--log)
        Type="log";
        WontCloneIt=true
        shift;
        ;;
    -g|--git)
        Type="git";
        shift
        ;;
    -s|--svn)
        Type="svn";
        shift
        ;;
    -m|--hg)
        Type="hg";
        shift
        ;;
    -f|--fossil)
        Type="fossil";
        shift
        ;;
    -k|--keyword)
        Keyword="$Keyword $2";
        echo $Keyword
        shift 2
        ;;
    --)
        shift
        break;
        ;;
    *)
        usage_and_exit
        break;
        ;;
     esac
done


if [[ $# -lt 1 ]]; then
    usage_and_exit
fi

remoteURL=$1

source zrWarehouseCommon.sh;

shortName='';
case $Type in
    hg)
        :
        ;;
    svn)
        shortName=$(svnShortName $remoteURL);
        ;;
        
    git)
        shortName=$(gitShortName $remoteURL);
        ;;
    hg)
        shortName=$(fossilShortName $remoteURL);
        ;;
     *)
        :
        ;;
esac
echo $Type $shortName $remoteURL $Keywordzr
writeInfoToList $Type $shortName $remoteURL $Keyword

if [[  $WontCloneIt -eq false ]]; then
    case $Type in
     git)
        gitCloneOrUpdate $RepoRootDir $remoteURL
        ;;
     hg)
        :
        ;;
     svn)
        svnCloneOrUpdate $RepoRootDir $remoteURL
        ;;
     fossil)
        fossilCloneOrUpdate $RepoRootDir $remoteURL
        ;;
     *)
        ;;
esac
fi








